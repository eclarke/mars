#====================================================#
# MARS|processing: MARS Processing/Reporting Module  #
#====================================================#

from mars import padded_barcodes

rule basecall_guppy:
    output:
        out_dir = directory(config['output_dir']+'/intermediate/guppy/'),
        summary = config['output_dir']+'/intermediate/guppy/sequencing_summary.txt'
    threads:
        config.get('guppy_threads', 8)
    params:
        fast5_dir = config.get('fast5_dir'),
        out_dir = config['output_dir']+'/intermediate/guppy'
    shell:
        """
        guppy_basecaller \
        --input_path {params.fast5_dir} \
        --save_path {params.out_dir} \
        --flowcell {config[flowcell]} \
        --kit {config[kit]} \
        --recursive \
        --num_callers {threads}
        """

rule demux_guppy:
    input:
        fastq_dir = rules.basecall_guppy.output.out_dir
    output:
        summary = rules.basecall_guppy.output.out_dir + '/barcoding_summary.txt'
    threads:
        config.get('guppy_threads', 8)
    params:
        config_opt = (
            '--config ' + config['guppy_barcoder_cfg_fp']
            if config.get('guppy_barcoder_cfg_fp') else '')
    shell:
        """
        guppy_barcoder \
        --input_path {input.fastq_dir} \
        --save_path {input.fastq_dir} \
        --worker_threads {threads} \
        {params.config_opt}
        """

rule basecall_demux_albacore:
    ''' 
    Basecalls and demultiplexes fast5 files using Albacore.
    '''
    output:
        out_dir = directory(expand(
            config['output_dir']+'/intermediate/albacore/workspace/barcode{bc}',
            bc=padded_barcodes(samples))),
        summary = config['output_dir']+'/intermediate/albacore/sequencing_summary.txt'
    threads:
        config.get('albacore_threads', 8)
    params:
        fast5_dir = config.get('fast5_dir'),
        out_dir = config['output_dir']+'/intermediate/albacore'
    shell:
        """
        read_fast5_basecaller.py \
        --input {params.fast5_dir} \
        --save_path {params.out_dir} \
        --flowcell {config[flowcell]} \
        --kit {config[kit]} \
        --output_format fastq \
        --recursive \
        --disable_filtering \
        --reads_per_fastq_batch 0 \
        --files_per_batch_folder 0 \
        --worker_threads {threads}
        """

rule gather_albacore_fastqs:
    '''
    Moves Albacore fastq files to canonical directory.
    '''
    input:
        directory(config['output_dir']+'/intermediate/albacore/workspace/barcode{bc}')
    output:
        config['output_dir']+'/fastqs/untrimmed/barcode{bc}.fastq.gz'
    shell:
        "cat {input}/*.fastq | gzip > {output}"

rule trim_adapters:
    '''
    Trims adapters from ends of reads and discards chimeric reads with adapters in the middle.
    Unnecessary when using Guppy.
    '''
    input:
        rules.gather_albacore_fastqs.output
    output:
        config['output_dir']+"/fastqs/trimmed/barcode{bc}.fastq.gz"
    threads: 8
    conda:
        "../envs/porechop.yaml"
    shell:
        "porechop -i {input} -o {output} --threads {threads} --discard_middle"

rule process:
    input:
        reads = rules.trim_adapters.output

rule process_all:
    input:
        expand(rules.process.input.reads, bc=padded_barcodes(samples))
