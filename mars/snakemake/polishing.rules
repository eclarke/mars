#=====================================================#
# MARS/polish: Genome Assembly Polishing Workflow     #
#=====================================================#

pol_working_dir = config['output_dir'] + '/intermediate/polish/'
pol_output_dir = config['output_dir'] + '/polished/'
pol_report_dir = config['output_dir'] + '/reports/polish/'

rule align_reads:
    input:
        contigs = rules.assemble.input,
        reads = rules.process.output
    output:
        pol_working_dir + '{sample}/{assembler}/sorted.bam'        
    params:
        tmp = pol_working_dir + '{sample}/{assembler}/reads.tmp'
    threads:
        config.get('minimap2_threads', 8)
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        """
        minimap2 -ax map-ont -t {threads} {input.contigs} {input.reads} |\
        samtools sort -o {output} -T {params.tmp} -
        samtools index {output}
        """

rule nanopolish_index:
    '''
    Builds the Nanopolish index from the fastq and fast5 files.
    '''
    input:
        fastq = rules.process.output
    output:
        proc_output_dir + '{sample}.fastq.gz.index.readdb'
    params:
        fast5 = config.get('fast5_dir')
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        "nanopolish index -d {params.fast5} {input.fastq}"
        
rule nanopolish_variants:
    input:
        contigs = rules.assemble.input,
        reads = rules.process.output,
        bam = rules.align_reads.output,
        index = rules.nanopolish_index.output
    output:
        directory(pol_working_dir + '{sample}/{assembler}/nanopolish.workspace')
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    threads:
        config.get('nanopolish_threads', 8)
    shell:
        """
        python $CONDA_PREFIX/bin/nanopolish_makerange.py {input.contigs} |\
        parallel --results {output} -P {threads} \
        nanopolish variants \
        --consensus \
        --outfile {output}/polished.{{1}}.vcf \
        --window {{1}} \
        --reads {input.reads} \
        --bam {input.bam} \
        --genome {input.contigs}
        """

rule nanopolish_vcf2fasta:
    input:
        contigs = rules.assemble.input,
        variants = rules.nanopolish_variants.output
    output:
        pol_output_dir + '{sample}/{assembler}/polished_assembly.fasta'
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        """
        nanopolish vcf2fasta -g {input.contigs} \
        {input.variants}/polished.*.vcf > {output}
        """
    
rule polish:
    input:
        rules.nanopolish_vcf2fasta.output

rule polish_all:
    input:
        expand(
            rules.polish.input,
            assembler=config.get('assembler', ''),
            sample=list(samples.sample_label))
