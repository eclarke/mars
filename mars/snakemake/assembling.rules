#=====================================================#
# MARS/assembly: Bacterial Genome Assembly Rules      #
#=====================================================#

from mars import padded_barcodes
from package_resources import resource_filename

rule assemble_canu:
    input:
        rules.process.input.reads
    output:
        config['output_dir'] + '/contigs/barcode{bc}/canu/assembly.fasta'
    params:
        contigs = config['output_dir'] + '/contigs/barcode{bc}/canu/canu.contigs.fasta',
        out_dir = config['output_dir'] + '/contigs/barcode{bc}/canu'
    resources:
        mem_mb = config['canu_max_mem']
    threads: 4
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        """
        canu -p canu -d {params.out_dir} \
        genomeSize={config[ref_genome_size]} \
        correctedErrorRate=0.16 \
        useGrid=false maxMemory={resources.mem_mb}M maxThreads={threads} \
        stopOnReadQuality=false \
        -nanopore-raw {input} && \
        cp {params.contigs} > {output}
        """        

rule assemble_unicycler:
    input:
        rules.process.input.reads
    output:
        config['output_dir'] + '/contigs/barcode{bc}/unicycler/assembly.fasta'
    threads: 8
    params:
        out_dir = config['output_dir'] + '/contigs/barcode{bc}/unicyler'
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        "unicycler -l {input} -o {params.out_dir} -t {threads}"

rule assemble_rebaler:
    input:
        reads = rules.process.input.reads,
        reference = config['ref_genome_fp'],
    output:
        config['output_dir'] + '/contigs/barcode{bc}/rebaler/assembly.fasta'
    threads: 8
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        "rebaler -t {threads} {input.reference} {input.reads} > {output}"

rule assemble:
    input: config['output_dir'] + '/contigs/barcode{bc}/{assembler}/assembly.fasta'

# Polishing
# ------------------------------------------------

rule align_reads:
    input:
        contigs = rules.assemble.input,
        reads = rules.process.input.reads
    output:
        bam = config['output_dir'] + '/contigs/barcode{bc}/{assembler}/sorted.bam',
        tmp = temp(config['output_dir'] + '/contigs/barcode{bc}/{assembler}/reads.tmp')
    threads: 8
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        """
        minimap2 -ax map-ont -t {threads} {input.contigs} {input.reads} |\
        samtools sort -o {output.bam} -T {output.tmp} -
        samtools index {output.bam}
        """

rule nanopolish_index:
    '''
    Builds the Nanopolish index based on the consensus fastqs, the binned fast5s, and the 
    Albacore sequencing summary file.
    '''
    input:
        fastq = rules.process.input.reads,
        summary = rules.basecall_demux_albacore.output.summary
    output:
        config['output_dir']+'/demuxed/fastq/barcode{bc}/trimmed.fastq.gz.index.readdb'
    params:
        fast5 = config['fast5_dir']
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        "nanopolish index -d {params.fast5} -s {input.summary} {input.fastq}"


rule nanopolish_variants:
    input:
        contigs = rules.assemble.input,
        reads = rules.align_reads.input.reads,
        bam = rules.align_reads.output.bam,
        index = rules.nanopolish_index.output
    output:
        directory(config['output_dir'] + '/contigs/barcode{bc}/{assembler}/nanopolish.workspace')
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    threads: 8
    shell:
        """
        python $CONDA_PREFIX/bin/nanopolish_makerange.py {input.contigs} | \
         parallel --results {output} -P {threads} \
          nanopolish variants --consensus -o {output}/polished.{{1}}.vcf \
          -w {{1}} -r {input.reads} -b {input.bam} -g {input.contigs} \
          -t {threads} --min-candidate-frequency 0.1 \
          --methylation-aware=dcm,dam
        """

rule nanopolish_vcf2fasta:
    input:
        contigs = rules.assemble.input,
        variants_dir = config['output_dir'] + '/contigs/barcode{bc}/{assembler}/nanopolish.workspace'
    output:
        config['output_dir'] + '/contigs/barcode{bc}/{assembler}/polished.assembly.fasta'
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        "nanopolish vcf2fasta -g {input.contigs} {input.variants_dir}/polished.*.vcf > {output}"

        
rule polish:
    input: rules.nanopolish_vcf2fasta.output

rule canu_assemble_all:
    input: expand(rules.polish.input, assembler='canu', bc=padded_barcodes(samples))

rule unicycler_assemble_all:
    input: expand(rules.polish.input, assembler='unicycler', bc=padded_barcodes(samples))

rule rebaler_assemble_all:
    input: expand(rules.polish.input, assembler='rebaler', bc=padded_barcodes(samples))

