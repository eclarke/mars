#=====================================================#
# MARS/assembly: Bacterial Genome Assembly Rules      #
#=====================================================#
from pkg_resources import resource_filename

from mars import padded_barcodes, required_config_keys

asm_working_dir = config['output_dir'] + '/assembling_temp/'
asm_output_dir = config['output_dir'] + '/assemblies/'
asm_report_dir = config['output_dir'] + '/reports/assembling/'

rule assemble_canu:
    input:
        rules.process.output
    output:
        asm_output_dir + '{sample}/canu/assembly.fasta'
    params:
        contigs = asm_working_dir + '/contigs/{sample}/canu/canu.contigs.fasta',
        out_dir = asm_working_dir + '/contigs/{sample}/canu',
        genome_size = config.get('ref_genome_size', 0)
    resources:
        mem_mb = config.get('canu_max_mem', 0)
    threads:
        config.get('canu_threads', 4)
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    message:
        required_config_keys('ref_genome_size', 'canu_max_mem')
    shell:
        """
        canu -p canu -d {params.out_dir} \
        genomeSize={params.genome_size} \
        correctedErrorRate=0.16 \
        useGrid=false maxMemory={resources.mem_mb}M maxThreads={threads} \
        stopOnReadQuality=false \
        -nanopore-raw {input} && \
        cp {params.contigs} > {output}
        """        

rule assemble_unicycler:
    input:
        rules.process.output
    output:
        asm_output_dir + '{sample}/unicycler/assembly.fasta'
    threads:
        config.get('unicycler_threads', 8)
    params:
        out_dir = asm_working_dir + '{sample}/unicycler'
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        """
        unicycler -l {input} -o {params.out_dir} -t {threads} &&\
        cp {params.out_dir}/assembly.fasta {output}
        """

rule assemble_rebaler:
    input:
        reads = rules.process.output
    output:
        asm_output_dir + '{sample}/rebaler/assembly.fasta'
    threads:
        config.get('rebaler_threads', 8)
    params:
        reference = config.get('ref_genome_fp')
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    message:
        required_config_keys('ref_genome_fp')
    shell:
        "rebaler -t {threads} {params.reference} {input.reads} > {output}"

rule assemble:
    input:
        asm_output_dir + '{sample}/{assembler}/assembly.fasta'


# Polishing
# ------------------------------------------------

rule align_reads:
    input:
        contigs = rules.assemble.input,
        reads = rules.process.output
    output:
        bam = asm_output_dir + '{sample}/{assembler}/sorted.bam'        
    params:
        tmp = asm_working_dir + '{sample}/{assembler}/reads.tmp'
    threads:
        config.get('minimap2_threads', 8)
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        """
        minimap2 -ax map-ont -t {threads} {input.contigs} {input.reads} |\
        samtools sort -o {output.bam} -T {params.tmp} -
        samtools index {output.bam}
        """

rule nanopolish_index:
    '''
    Builds the Nanopolish index based on the consensus fastqs, the binned fast5s, and the 
    Albacore sequencing summary file.
    '''
    input:
        fastq = rules.process.output,
        summary = proc_report_dir + config['basecaller'] + '/sequencing_summary.txt'
    output:
        proc_output_dir + '{sample}.fastq.gz.index.readdb'
    params:
        fast5 = config.get('fast5_dir', 'MISSING')
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    message:
        required_config_keys('fast5_dir')
    shell:
        "nanopolish index -d {params.fast5} -s {input.summary} {input.fastq}"

rule nanopolish_variants:
    input:
        contigs = rules.assemble.input,
        reads = rules.align_reads.input.reads,
        bam = rules.align_reads.output.bam,
        index = rules.nanopolish_index.output
    output:
        directory(asm_working_dir + '{sample}/{assembler}/nanopolish.workspace')
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    threads:
        config.get('nanopolish_threads', 8)
    shell:
        """
        python $CONDA_PREFIX/bin/nanopolish_makerange.py {input.contigs} | \
         parallel --results {output} -P {threads} \
          nanopolish variants --consensus -o {output}/polished.{{1}}.vcf \
          -w {{1}} -r {input.reads} -b {input.bam} -g {input.contigs} \
          -t {threads} --min-candidate-frequency 0.1 \
          --methylation-aware=dcm,dam
        """

rule nanopolish_vcf2fasta:
    input:
        contigs = rules.assemble.input,
        variants_dir = rules.nanopolish_variants.output
    output:
        asm_output_dir + '{sample}/{assembler}/assembly.polished.fasta'
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        "nanopolish vcf2fasta -g {input.contigs} {input.variants_dir}/polished.*.vcf > {output}"

        
rule polish:
    input: rules.nanopolish_vcf2fasta.output

rule canu_assemble_all:
    input: expand(rules.polish.input, assembler='canu', sample=list(samples.sample_label))

rule unicycler_assemble_all:
    input: expand(rules.polish.input, assembler='unicycler', sample=list(samples.sample_label))

rule rebaler_assemble_all:
    input: expand(rules.polish.input, assembler='rebaler', sample=list(samples.sample_label))

