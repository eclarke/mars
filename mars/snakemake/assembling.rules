#=====================================================#
# MARS/assemble: Bacterial Genome Assembly Workflow   #
#=====================================================#
from pkg_resources import resource_filename

from mars import padded_barcodes

localrules: assemble, assemble_all

asm_working_dir = config['output_dir'] + '/assembling_temp/'
asm_output_dir = config['output_dir'] + '/assemblies/'
asm_report_dir = config['output_dir'] + '/reports/assembling/'

rule assemble_canu:
    input:
        rules.process.input.filtered
    output:
        asm_output_dir + '{sample}/canu/assembly.fasta'
    params:
        contigs = asm_working_dir + '/contigs/{sample}/canu/canu.contigs.fasta',
        out_dir = asm_working_dir + '/contigs/{sample}/canu',
        genome_size = config.get('ref_genome_size', 0)
    resources:
        mem_mb = config.get('canu_max_mem', 0)
    threads:
        config.get('canu_threads', 4)
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        """
        canu -p canu -d {params.out_dir} \
        genomeSize={params.genome_size} \
        correctedErrorRate=0.16 \
        useGrid=false maxMemory={resources.mem_mb}M maxThreads={threads} \
        stopOnReadQuality=false \
        -nanopore-raw {input} && \
        cp {params.contigs} {output}
        """        

rule assemble_unicycler:
    input:
        rules.process.input.filtered
    output:
        fasta = asm_output_dir + '{sample}/unicycler/assembly.fasta',
        gfa = asm_output_dir + '{sample}/unicycler/assembly.gfa',
    threads:
        config.get('unicycler_threads', 8)
    params:
        out_dir = asm_working_dir + '{sample}/unicycler',
        mode = config.get("unicycler_mode", "normal")
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        """
        unicycler -l {input} -o {params.out_dir} -t {threads} \
        --mode {params.mode} &&\
        cp {params.out_dir}/assembly.fasta {output.fasta} &&\
        cp {params.out_dir}/assembly.gfa {output.gfa}
        """

rule assemble_rebaler:
    input:
        reads = rules.process.input.filtered
    output:
        asm_output_dir + '{sample}/rebaler/assembly.fasta'
    threads:
        config.get('rebaler_threads', 8)
    params:
        reference = config.get('ref_genome_fp')
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    shell:
        "rebaler -t {threads} {params.reference} {input.reads} > {output}"

rule assemble:
    input: asm_output_dir + '{sample}/{assembler}/assembly.fasta'
        
rule assess_assembled_quast:
    input:
        rules.assemble.input
    output:
        directory(asm_report_dir + '{sample}/{assembler}/quast')
    conda:
        resource_filename("mars", "snakemake/envs/assembling.yaml")
    threads:
        config.get("quast_threads", 8)    
    shell:
        """
        quast {input} \
        -o {output} \
        -r {config[ref_genome_fp]} \
        -g {config[ref_genome_features_fp]} \
        --glimmer \
        -t {threads}
        """

rule assemble_all:
    input:
        assemblies = expand(
            rules.assemble.input,
            assembler=config.get('assembler', ''),
            sample=list(samples.sample_label)),
        reports = expand(
            rules.assess_assembled_quast.output,
            assembler=config.get('assembler', ''),
            sample=list(samples.sample_label))


